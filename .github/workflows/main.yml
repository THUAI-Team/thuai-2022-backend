# This is a basic workflow to help you get started with Actions

name: build

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]



  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  set_latest:
    name: Mark the latest release
    uses: EndBug/latest-tag@latest
  create_release:
    name: Create release
    runs-on: ubuntu-20.04
    # Note this. We are going to use that in further jobs.
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Add SHORT_SHA env property with commit short sha
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_name: ${{ env.SHORT_SHA }}
          tag_name: ${{ env.SHORT_SHA }}
          draft: false
          prerelease: false
          owner: ssast-tech
          repo: ssast-tech/thuai-egg-releases

  build:
    name: Build artifacts
    needs: create_release # we need to know the upload URL
    # The type of runner that the job will run on
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: ubuntu-20.04
          - os: macos-10.15
          - os: windows-2019

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Get CMake
        uses: lukka/get-cmake@v3.19.2

      - name: Get RandR Lib for Ubuntu
        if: matrix.config.os == 'ubuntu-20.04'
        run: sudo apt-get install xorg-dev libglu1-mesa-dev libxrandr-dev

      - name: Install vcpkg on unix-like systems
        if: matrix.config.os != 'windows-2019'
        working-directory: ./tools/vcpkg
        timeout-minutes: 10
        run: |
          ls -al
          ./bootstrap-vcpkg.sh
          ./vcpkg integrate install
          ./vcpkg install box2d
      
      - name: Install vcpkg on Windows
        if: matrix.config.os == 'windows-2019'
        shell: pwsh
        timeout-minutes: 10
        working-directory: .\tools\vcpkg
        run: |
          .\bootstrap-vcpkg.bat
          .\vcpkg integrate install
          .\vcpkg install box2d:x64-windows
      
      - name: Swith to clang++ on Ubuntu
        if: matrix.config.os == 'ubuntu-20.04'
        run: |
          sudo apt-get install clang
          sudo update-alternatives --set c++ `which clang++`
      
      - name: Build the executable
        shell: pwsh
        run: ./build.ps1

      - name: Upload Windows release
        if: matrix.config.os == 'windows-2019'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_name: eggs-windows-x86_64.exe
          asset_path: ./bin/Debug/main.exe
          asset_content_type: application/octet-stream
      - name: Upload unix-like releases
        if: matrix.config.os != 'windows-2019'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_name: eggs-${{ matrix.config.os }}-x86_64
          asset_path: ./bin/main
          asset_content_type: application/octet-stream
